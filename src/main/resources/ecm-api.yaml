openapi: 3.0.2
info:
  title: ecm_api
  version: 1.0.0
  description: ECM API for users
servers:
  - url: http://localhost:8080/ecm-api/v1/
paths:
  /create_folder:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CitizenMetadata'
        required: true
      responses:
        '200':
          description: Successfully created new folder
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FolderCreationSuccessResponse'
        '400':
          description: Some of the parameters are missing or not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientError'
        '403':
          description: User does not have the required access to perform the action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientError'
        '404':
          description: 'The parent folder could not be found, or the authenticated user does not have access to the parent folder.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientError'
        '409':
          description: The folder is locked or the folder already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientError'
  /download_file:
    post:
      description: Get file
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FileDownloadRequest'
        required: true
      responses:
        '200':
          description: A binary file
          content:
            application/octet-stream:
              schema:
                type: string
                format: binary
        '202':
          description: File is not ready to be downloaded.
          content:
            application/json:
              schema:
                type: string
          headers:
            Retry-After:
              schema:
                type: integer
              description: Time in seconds after which the file will be available for the client to download.
        '404':
          description: File not found
          content:
            application/json:
              schema:
                type: string
  /upload_file:
    post:
      requestBody:
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/FileUploadData'
        required: true
      responses:
        '200':
          description: Document ID of uploaded content is returned
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UploadFileResponse'
        '400':
          description: Folder error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientError'
        '409':
          description: File exists error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientError'
  /search:
    post:
      description: Get file
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchRequest'
      responses:
        '200':
          description: File or Folder obtained
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SearchResult'
        '400':
          description: Some of the parameters are missing or not valid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientError'
        '403':
          description: User does not have the required access to perform the action.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientError'
        '404':
          description: File/Folder not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientError'
        '500':
          description: Service error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientError'
  /apply_metadata:
    post:
      description: apply metadata to document
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MetadataAdditionRequest'
      responses:
        '200':
          description: metadata successfully applied
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetadataAdditionResponse'
        '409':
          description: File not existing error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientError'
        '500':
          description: metadata not applied due to error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientError'
  /update_metadata:
    post:
      description: update metadata of document
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MetadataUpdationRequest'
      responses:
        '200':
          description: metadata successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetadataUpdationResponse'
        '409':
          description: File not existing error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientError'
        '500':
          description: metadata not applied due to error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientError'
  /delete_document:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DocumentDeletionRequest'
      responses:
        '200':
          description: delete document
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentDeletionResult'
        '409':
          description: File not existing error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientError'
        '500':
          description: document deletion error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientError'
  /view_document:
    post:
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DocumentViewRequest'
      responses:
        '200':
          description: view metadata
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DocumentViewResponse'
        '400':
          description: Folder error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientError'
        '409':
          description: File not existing error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientError'
        '500':
          description: document view error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ClientError'
components:
  schemas:
    FolderCreationSuccessResponse:
      type: object
      properties:
        id:
          type: string
          description: The unique identifier that represents the folder.
    UploadFileResponse:
      title: Response for successful file upload
      type: object
      properties:
        Status:
          type: string
          description: Status message for operation
        FileId:
          type: string
          description: File ID of uploaded content
    ClientError:
      title: Generic error
      type: object
      properties:
        code:
          type: string
          description: Error code
        message:
          type: string
          description: Error description
    CitizenMetadata:
      title: Citizen metadata
      type: object
      properties:
        logon_user_id:
          type: string
        mpi_id:
          type: string
        sys_id:
          type: string
        firstName:
          type: string
          description: First name
        lastName:
          type: string
          description: Last name
        dob:
          type: string
          description: Date of birth
          format: date
        ssn4:
          type: string
          description: Last 4 digits of SSN
          pattern: "\\d{4}"
    FileDownloadRequest:
      type: object
      properties:
        fileId:
          type: string
    FileUploadData:
      type: object
      properties:
        boxFolderId:
          type: string
        file:
          type: string
          format: binary
    SearchRequest:
      type: object
      required:
        - folderId
      properties:
        fileName:
          type: string
        folderId:
          type: string
          required: true
        offset:
          type: integer
          default: 0
        limit:
          type: integer
          default: 20
    FileDownloadData:
      title: File content
      type: object
      properties:
        file:
          type: string
          format: binary
    FileInfo:
      type: object
      properties:
        fileId:
          type: string
        fileName:
          type: string
        itemType:
          type: string
          enum:
            - file
            - folder
        citizenMetadata:
          $ref: '#/components/schemas/CitizenMetadata'
        documentTypeMetadata:
          $ref: '#/components/schemas/DocumentTypeMetadata'
        confidentialityMetadata:
          $ref: '#/components/schemas/DocumentConfidentialityMetadata'
        verificationMetadata:
          $ref: '#/components/schemas/DocumentVerificationMetadata'
        caseFaSnapMetadata:
          type: array
          items:
            $ref: '#/components/schemas/DocumentFaSnapCaseMetadata'
        caseChildCareMetadata:
          type: array
          items:
            $ref: '#/components/schemas/DocumentChildCareCaseMetadata'
    SearchResult:
      type: object
      properties:
        complete:
          type: string
          enum:
            - true
            - false
        fileData:
          type: array
          items:
            $ref: '#/components/schemas/FileInfo'
    DocumentFaSnapCaseMetadata:
      type: object
      properties:
        case_number:
          type: string
        application_number:
          type: string
        recipient_id:
          type: string
        signed_date:
          type: string
          format: date
        county:
          type: string
    DocumentChildCareCaseMetadata:
      type: object
      properties:
        application_number:
          type: string
        document_name:
          type: string
        load_date:
          type: string
          format: date
        load_time:
          type: string
        county:
          type: string
    DocumentTypeMetadata:
      type: object
      properties:
        document_type:
          type: string
    DocumentConfidentialityMetadata:
      type: object
      properties:
        confidential:
          type: string
          enum:
            - yes
            - no
    DocumentVerificationMetadata:
      type: object
      properties:
        verified:
          type: string
          enum:
            - yes
            - no
        verified_by:
          type: string
    MetadataAdditionRequest:
      type: object
      properties:
        documentId:
          type: string
        documentTypeMetadata:
          $ref: '#/components/schemas/DocumentTypeMetadata'
        documentConfidentialityMetadata:
          $ref: '#/components/schemas/DocumentConfidentialityMetadata'
        documentVerificationMetadata:
          $ref: '#/components/schemas/DocumentVerificationMetadata'
        caseFaSnapMetadata:
          $ref: '#/components/schemas/DocumentFaSnapCaseMetadata'
        caseChildCareMetadata:
          $ref: '#/components/schemas/DocumentChildCareCaseMetadata'
    MetadataAdditionResponse:
      type: object
      properties:
        message:
          type: string
    MetadataUpdationRequest:
      type: object
      properties:
        documentId:
          type: string
        caseFaSnapMetadata:
          $ref: '#/components/schemas/DocumentFaSnapCaseMetadata'
        caseChildCareMetadata:
          $ref: '#/components/schemas/DocumentChildCareCaseMetadata'
    MetadataUpdationResponse:
      type: object
      properties:
        message:
          type: string
    DocumentDeletionRequest:
      type: object
      required:
        - documentId
        - loggedOnUser
      properties:
        documentId:
          type: string
          required: true
        verified:
          type: boolean
          default: false
        loggedOnUser:
          type: string
          required: true
    DocumentDeletionResult:
      type: object
      properties:
        message:
          type: string
    DocumentViewRequest:
      type: object
      required:
        - documentId
        - loggedOnUser
      properties:
        documentId:
          type: string
          required: true
        loggedOnUser:
          type: string
          required: true
    DocumentViewResponse:
      type: object
      properties:
        previewUrl:
          type: string

